/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockAir
 *  net.minecraft.block.BlockBed
 *  net.minecraft.block.BlockButton
 *  net.minecraft.block.BlockCake
 *  net.minecraft.block.BlockChest
 *  net.minecraft.block.BlockDaylightDetector
 *  net.minecraft.block.BlockDoublePlant
 *  net.minecraft.block.BlockEndPortalFrame
 *  net.minecraft.block.BlockFlower
 *  net.minecraft.block.BlockLilyPad
 *  net.minecraft.block.BlockMushroom
 *  net.minecraft.block.BlockPressurePlate
 *  net.minecraft.block.BlockRedstoneComparator
 *  net.minecraft.block.BlockRedstoneRepeater
 *  net.minecraft.block.BlockRedstoneTorch
 *  net.minecraft.block.BlockReed
 *  net.minecraft.block.BlockSapling
 *  net.minecraft.block.BlockSign
 *  net.minecraft.block.BlockSlab
 *  net.minecraft.block.BlockSnow
 *  net.minecraft.block.BlockTallGrass
 *  net.minecraft.block.BlockTorch
 *  net.minecraft.block.BlockTripWire
 *  net.minecraft.block.BlockTripWireHook
 *  net.minecraft.block.properties.IProperty
 *  net.minecraft.block.state.IBlockState
 *  net.minecraft.client.entity.EntityPlayerSP
 *  net.minecraft.client.settings.GameSettings
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.EntityLivingBase
 *  net.minecraft.entity.item.EntityArmorStand
 *  net.minecraft.init.Blocks
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.client.CPacketPlayer$PositionRotation
 *  net.minecraft.network.play.client.CPacketPlayer$Rotation
 *  net.minecraft.util.math.BlockPos
 *  net.minecraft.util.math.RayTraceResult
 *  net.minecraft.util.math.RayTraceResult$Type
 *  net.minecraft.world.IBlockAccess
 *  net.minecraftforge.client.event.InputUpdateEvent
 *  net.minecraftforge.client.event.RenderWorldLastEvent
 *  net.minecraftforge.event.entity.living.LivingEvent$LivingUpdateEvent
 *  net.minecraftforge.fml.common.gameevent.TickEvent$ClientTickEvent
 *  net.minecraftforge.fml.common.gameevent.TickEvent$PlayerTickEvent
 *  org.lwjgl.input.Mouse
 */
package i.gishreloaded.deadcode.hacks.exploit;

import i.gishreloaded.deadcode.hack.Hack;
import i.gishreloaded.deadcode.hack.HackCategory;
import i.gishreloaded.deadcode.utils.RaytraceUtils;
import i.gishreloaded.deadcode.utils.visual.RenderUtils;
import i.gishreloaded.deadcode.value.Mode;
import i.gishreloaded.deadcode.value.types.ModeValue;
import i.gishreloaded.deadcode.wrappers.Wrapper;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockBed;
import net.minecraft.block.BlockButton;
import net.minecraft.block.BlockCake;
import net.minecraft.block.BlockChest;
import net.minecraft.block.BlockDaylightDetector;
import net.minecraft.block.BlockDoublePlant;
import net.minecraft.block.BlockEndPortalFrame;
import net.minecraft.block.BlockFlower;
import net.minecraft.block.BlockLilyPad;
import net.minecraft.block.BlockMushroom;
import net.minecraft.block.BlockPressurePlate;
import net.minecraft.block.BlockRedstoneComparator;
import net.minecraft.block.BlockRedstoneRepeater;
import net.minecraft.block.BlockRedstoneTorch;
import net.minecraft.block.BlockReed;
import net.minecraft.block.BlockSapling;
import net.minecraft.block.BlockSign;
import net.minecraft.block.BlockSlab;
import net.minecraft.block.BlockSnow;
import net.minecraft.block.BlockTallGrass;
import net.minecraft.block.BlockTorch;
import net.minecraft.block.BlockTripWire;
import net.minecraft.block.BlockTripWireHook;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityArmorStand;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.world.IBlockAccess;
import net.minecraftforge.client.event.InputUpdateEvent;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.event.entity.living.LivingEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Mouse;

public class Teleport
extends Hack {
    public ModeValue a;
    public boolean b = false;
    public BlockPos c = null;
    public boolean d;
    public int e;
    public float f = 0.0f;
    public boolean g;

    public Teleport(String string) {
        super(string, HackCategory.Exploit);
        this.b("General");
        this.a = new ModeValue("Mode", new Mode("Reach", true), new Mode("Flight"), new Mode("Matrix"), new Mode("Target"));
        this.a(this.a);
        this.b("Other");
    }

    @Override
    public String getDescription() {
        return "Teleports you.";
    }

    @Override
    public void onEnable() {
        if (this.a.getModeByIndex(0).isToggled()) {
            this.f = Wrapper.INSTANCE.getMinecraft().playerController.getBlockReachDistance();
        } else if (this.a.getModeByIndex(2).isToggled()) {
            // empty if block
        }
        super.onEnable();
    }

    @Override
    public void onDisable() {
        EntityPlayerSP entityPlayerSP = Wrapper.INSTANCE.getLocalPlayer();
        if (this.a.getModeByIndex(1).isToggled()) {
            entityPlayerSP.noClip = false;
            this.b = false;
            this.c = null;
            return;
        }
        if (this.a.getModeByIndex(0).isToggled()) {
            this.d = false;
            f.a((Entity)Wrapper.INSTANCE.getLocalPlayer(), this.f);
        } else if (this.a.getModeByIndex(2).isToggled() && this.g) {
            entityPlayerSP.motionY = 1.0;
            this.g = false;
            this.c = null;
            Wrapper.INSTANCE.getMinecraft().renderGlobal.loadRenderers();
            ef.l();
        }
        super.onDisable();
    }

    @Override
    public void onPlayerTickEvent(TickEvent.PlayerTickEvent playerTickEvent) {
        if (!this.a.getModeByIndex(2).isToggled()) {
            return;
        }
        if (!Wrapper.INSTANCE.getLocalPlayer().onGround && Wrapper.INSTANCE.getLocalPlayer().fallDistance > 2.0f && eS.b(Wrapper.INSTANCE.getLocalPlayer().getPosition().down()) == Blocks.AIR) {
            this.g = true;
        }
        if (this.g) {
            ef.a(false);
        }
        super.onPlayerTickEvent(playerTickEvent);
    }

    @Override
    public void onInputEvent(InputUpdateEvent inputUpdateEvent) {
        if (this.a.getModeByIndex(2).isToggled() && this.g && !inputUpdateEvent.getMovementInput().jump) {
            Wrapper.INSTANCE.getLocalPlayer().onGround = false;
        }
        super.onInputEvent(inputUpdateEvent);
    }

    @Override
    public boolean a(Object object, bw bw2) {
        if (bw2 == bw.b && this.a.getModeByIndex(1).isToggled() && (object instanceof CPacketPlayer || object instanceof CPacketPlayer.Position || object instanceof CPacketPlayer.Rotation || object instanceof CPacketPlayer.PositionRotation)) {
            return this.b;
        }
        return true;
    }

    @Override
    public void onClientTickEvent(TickEvent.ClientTickEvent clientTickEvent) {
        if (this.a.getModeByIndex(1).isToggled()) {
            RayTraceResult rayTraceResult = Wrapper.INSTANCE.getMinecraft().objectMouseOver;
            if (rayTraceResult == null) {
                return;
            }
            EntityPlayerSP entityPlayerSP = Wrapper.INSTANCE.getLocalPlayer();
            GameSettings gameSettings = Wrapper.INSTANCE.getGameSettings();
            if (!this.b) {
                if (gameSettings.keyBindAttack.isKeyDown() && rayTraceResult.typeOfHit == RayTraceResult.Type.BLOCK) {
                    if (eS.a(rayTraceResult.getBlockPos(), Blocks.AIR)) {
                        return;
                    }
                    this.c = rayTraceResult.getBlockPos();
                    this.b = true;
                }
                return;
            }
            entityPlayerSP.noClip = false;
            if (gameSettings.keyBindSneak.isKeyDown() && entityPlayerSP.onGround && this.c != null) {
                double d2 = this.c.getX();
                double d3 = this.c.getY();
                double d4 = this.c.getZ();
                et.b(d2, d3, d4);
            }
        } else if (this.a.getModeByIndex(0).isToggled()) {
            if ((!Mouse.isButtonDown((int)0) && Wrapper.INSTANCE.getMinecraft().inGameHasFocus || !Wrapper.INSTANCE.getMinecraft().inGameHasFocus) && Wrapper.INSTANCE.getLocalPlayer().getItemInUseCount() == 0) {
                f.a((Entity)Wrapper.INSTANCE.getLocalPlayer(), 100.0);
                this.d = true;
            } else {
                this.d = false;
                f.a((Entity)Wrapper.INSTANCE.getLocalPlayer(), this.f);
            }
            if (this.c != null && this.e == 0 && Mouse.isButtonDown((int)1)) {
                double d5 = this.c.getX();
                double d6 = this.c.getY();
                double d7 = this.c.getZ();
                et.b(d5, d6, d7);
                this.e = 5;
            }
            if (this.e > 0) {
                --this.e;
            }
        } else if (this.a.getModeByIndex(3).isToggled()) {
            Entity entity = RaytraceUtils.b(100.0);
            if (this.e == 0 && Mouse.isButtonDown((int)0) && entity != null && entity instanceof EntityLivingBase && !(entity instanceof EntityArmorStand)) {
                double d8 = entity.posX;
                double d9 = entity.posY;
                double d10 = entity.posZ;
                et.b(d8, d9, d10);
                this.e = 5;
            }
            if (this.e > 0) {
                --this.e;
            }
        }
        super.onClientTickEvent(clientTickEvent);
    }

    public boolean a(double[] dArray) {
        BlockPos blockPos = new BlockPos(dArray[0], dArray[1], dArray[2]);
        if (this.b(dArray)) {
            RenderUtils.a(new BlockPos(dArray[0], dArray[1], dArray[2]), 1.0f, 0.0f, 1.0f);
            if (Wrapper.INSTANCE.getMinecraft().inGameHasFocus) {
                this.c = blockPos;
                return false;
            }
            this.c = null;
        }
        return true;
    }

    @Override
    public void onUpdateEvent(LivingEvent.LivingUpdateEvent livingUpdateEvent) {
        if (!this.a.getModeByIndex(1).isToggled()) {
            return;
        }
        EntityPlayerSP entityPlayerSP = Wrapper.INSTANCE.getLocalPlayer();
        GameSettings gameSettings = Wrapper.INSTANCE.getGameSettings();
        if (!this.b) {
            entityPlayerSP.noClip = true;
            entityPlayerSP.fallDistance = 0.0f;
            entityPlayerSP.onGround = true;
            entityPlayerSP.capabilities.isFlying = false;
            entityPlayerSP.motionX = 0.0;
            entityPlayerSP.motionY = 0.0;
            entityPlayerSP.motionZ = 0.0;
            float f2 = 0.5f;
            if (gameSettings.keyBindJump.isKeyDown()) {
                entityPlayerSP.motionY += (double)f2;
            }
            if (gameSettings.keyBindSneak.isKeyDown()) {
                entityPlayerSP.motionY -= (double)f2;
            }
            double d2 = entityPlayerSP.rotationPitch + 90.0f;
            double d3 = entityPlayerSP.rotationYaw + 90.0f;
            boolean bl = gameSettings.keyBindForward.isKeyDown();
            boolean bl2 = gameSettings.keyBindBack.isKeyDown();
            boolean bl3 = gameSettings.keyBindLeft.isKeyDown();
            boolean bl4 = gameSettings.keyBindRight.isKeyDown();
            if (bl) {
                if (bl3) {
                    d3 -= 45.0;
                } else if (bl4) {
                    d3 += 45.0;
                }
            } else if (bl2) {
                d3 += 180.0;
                if (bl3) {
                    d3 += 45.0;
                } else if (bl4) {
                    d3 -= 45.0;
                }
            } else if (bl3) {
                d3 -= 90.0;
            } else if (bl4) {
                d3 += 90.0;
            }
            if (bl || bl3 || bl2 || bl4) {
                entityPlayerSP.motionX = Math.cos(Math.toRadians(d3));
                entityPlayerSP.motionZ = Math.sin(Math.toRadians(d3));
            }
        }
        super.onUpdateEvent(livingUpdateEvent);
    }

    @Override
    public void onRenderWorldLastEvent(RenderWorldLastEvent renderWorldLastEvent) {
        if (this.a.getModeByIndex(1).isToggled()) {
            if (this.c == null) {
                return;
            }
            if (this.c.getY() == new BlockPos((Entity)Wrapper.INSTANCE.getLocalPlayer()).down().getY()) {
                RenderUtils.a(this.c, 1.0f, 0.0f, 1.0f);
                return;
            }
            RenderUtils.a(this.c, 1.0f, 0.0f, 0.0f);
        } else if (this.a.getModeByIndex(0).isToggled()) {
            RayTraceResult rayTraceResult = Wrapper.INSTANCE.getMinecraft().objectMouseOver;
            if (rayTraceResult == null) {
                return;
            }
            if (rayTraceResult.getBlockPos() != null && this.d) {
                double[] dArray;
                for (float f2 = -2.0f; f2 < 18.0f && this.a(dArray = new double[]{rayTraceResult.getBlockPos().getX(), (float)rayTraceResult.getBlockPos().getY() + f2, rayTraceResult.getBlockPos().getZ()}); f2 += 1.0f) {
                }
            } else if (rayTraceResult.entityHit != null) {
                double[] dArray;
                for (float f3 = -2.0f; f3 < 18.0f && this.a(dArray = new double[]{rayTraceResult.entityHit.posX, rayTraceResult.entityHit.posY + (double)f3, rayTraceResult.entityHit.posZ}); f3 += 1.0f) {
                }
            } else {
                this.c = null;
            }
        } else if (this.a.getModeByIndex(2).isToggled()) {
            if (this.c == null) {
                return;
            }
            RenderUtils.a(this.c, 1.0f, 0.0f, 1.0f);
        }
        super.onRenderWorldLastEvent(renderWorldLastEvent);
    }

    public boolean b(double[] dArray) {
        boolean bl = false;
        Block block = eS.b(new BlockPos(dArray[0], dArray[1] - 1.0, dArray[2]));
        Block block2 = eS.b(new BlockPos(dArray[0], dArray[1], dArray[2]));
        Block block3 = eS.b(new BlockPos(dArray[0], dArray[1] + 1.0, dArray[2]));
        boolean bl2 = block.getCollisionBoundingBox(eS.a(new BlockPos(dArray[0], dArray[1] - 1.0, dArray[2])), (IBlockAccess)Wrapper.INSTANCE.getWorld(), new BlockPos(dArray[0], dArray[1] - 1.0, dArray[2])) != null;
        boolean bl3 = this.a(block2);
        boolean bl4 = this.a(block3);
        if (bl2 && bl3 && bl4) {
            bl = true;
        }
        return bl;
    }

    public double a(Block block, BlockPos blockPos) {
        IBlockState iBlockState = eS.a(blockPos);
        double d2 = 0.0;
        if (block instanceof BlockSlab && !((BlockSlab)block).isDouble()) {
            d2 -= 0.5;
        } else if (block instanceof BlockEndPortalFrame) {
            d2 -= (double)0.2f;
        } else if (block instanceof BlockBed) {
            d2 -= (double)0.44f;
        } else if (block instanceof BlockCake) {
            d2 -= 0.5;
        } else if (block instanceof BlockDaylightDetector) {
            d2 -= 0.625;
        } else if (block instanceof BlockRedstoneComparator || block instanceof BlockRedstoneRepeater) {
            d2 -= 0.875;
        } else if (block instanceof BlockChest || block == Blocks.ENDER_CHEST) {
            d2 -= 0.125;
        } else if (block instanceof BlockLilyPad) {
            d2 -= (double)0.95f;
        } else if (block == Blocks.SNOW_LAYER) {
            d2 -= 0.875;
            d2 += (double)(0.125f * (float)((Integer)iBlockState.getValue((IProperty)BlockSnow.LAYERS) - 1));
        } else if (this.a(block)) {
            d2 -= 1.0;
        }
        return d2;
    }

    public boolean a(Block block) {
        return block == Blocks.PORTAL || block == Blocks.SNOW_LAYER || block instanceof BlockTripWireHook || block instanceof BlockTripWire || block instanceof BlockDaylightDetector || block instanceof BlockRedstoneComparator || block instanceof BlockRedstoneRepeater || block instanceof BlockSign || block instanceof BlockAir || block instanceof BlockPressurePlate || block instanceof BlockTallGrass || block instanceof BlockFlower || block instanceof BlockMushroom || block instanceof BlockDoublePlant || block instanceof BlockReed || block instanceof BlockSapling || block == Blocks.CARROTS || block == Blocks.WHEAT || block == Blocks.NETHER_WART || block == Blocks.POTATOES || block == Blocks.PUMPKIN_STEM || block == Blocks.MELON_STEM || block == Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE || block == Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE || block == Blocks.REDSTONE_WIRE || block instanceof BlockTorch || block instanceof BlockRedstoneTorch || block == Blocks.LEVER || block instanceof BlockButton;
    }
}

